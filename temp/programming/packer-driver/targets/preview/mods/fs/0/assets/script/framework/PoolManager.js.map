{"version":3,"sources":["file:///C:/Users/USER/Desktop/ban_may_bay/assets/script/framework/PoolManager.ts"],"names":["_decorator","NodePool","instantiate","ccclass","property","PoolManager","instance","_instance","getNode","prefab","parent","name","data","node","_dictPrefab","pool","_dictPool","size","get","active","putNode","put"],"mappings":";;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAqCC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,W,OAAAA,W;;;;;;;AAChDC,MAAAA,O,GAAsBH,U,CAAtBG,O;AAASC,MAAAA,Q,GAAaJ,U,CAAbI,Q;;6BAaJC,W,WADZF,OAAO,CAAC,aAAD,C;;6CAW2B,E;;+CACI,E;;;oBATrBG,Q,GAAd,oBAAwB;AACpB,cAAG,CAAC,KAAKC,SAAT,EAAmB;AACf,iBAAKA,SAAL,GAAiB,IAAIF,WAAJ,EAAjB;AACH;;AAED,iBAAO,KAAKE,SAAZ;AACH,S;;;;eAOMC,O,GAAP,iBAAeC,MAAf,EAA+BC,MAA/B,EAA4C;AACxC,cAAIC,IAAI,GAAGF,MAAM,CAACG,IAAP,CAAYD,IAAvB,CADwC,CAExC;;AACA,cAAIE,IAAU,GAAG,IAAjB;AACA,eAAKC,WAAL,CAAiBH,IAAjB,IAAyBF,MAAzB;AACA,cAAMM,IAAI,GAAG,KAAKC,SAAL,CAAeL,IAAf,CAAb;;AACA,cAAII,IAAJ,EAAU;AACN,gBAAIA,IAAI,CAACE,IAAL,KAAc,CAAlB,EAAqB;AACjBJ,cAAAA,IAAI,GAAGE,IAAI,CAACG,GAAL,EAAP;AACH,aAFD,MAEO;AACHL,cAAAA,IAAI,GAAGX,WAAW,CAACO,MAAD,CAAlB;AACH;AACJ,WAND,MAMO;AACH,iBAAKO,SAAL,CAAeL,IAAf,IAAuB,IAAIV,QAAJ,EAAvB;AACAY,YAAAA,IAAI,GAAGX,WAAW,CAACO,MAAD,CAAlB;AACH;;AAEDI,UAAAA,IAAI,CAACH,MAAL,GAAcA,MAAd;AACAG,UAAAA,IAAI,CAACM,MAAL,GAAc,IAAd;AACA,iBAAON,IAAP;AACH,S;;eAEMO,O,GAAP,iBAAeP,IAAf,EAA0B;AACtB,cAAIF,IAAI,GAAGE,IAAI,CAACF,IAAhB,CADsB,CAEtB;;AACAE,UAAAA,IAAI,CAACH,MAAL,GAAc,IAAd;;AACA,cAAI,CAAC,KAAKM,SAAL,CAAeL,IAAf,CAAL,EAA2B;AACvB,iBAAKK,SAAL,CAAeL,IAAf,IAAuB,IAAIV,QAAJ,EAAvB;AACH;;AAED,eAAKe,SAAL,CAAeL,IAAf,EAAqBU,GAArB,CAAyBR,IAAzB;AACH,S","sourcesContent":["\r\nimport { _decorator, Component, Node, Prefab, NodePool, instantiate } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\ninterface IDictPool {\r\n    [name: string]: NodePool;\r\n}\r\n\r\ninterface IDictPrefab {\r\n    [name: string]: Prefab;\r\n}\r\n\r\n@ccclass('PoolManager')\r\nexport class PoolManager {\r\n\r\n    public static instance(){\r\n        if(!this._instance){\r\n            this._instance = new PoolManager();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    private _dictPool: IDictPool = {};\r\n    private _dictPrefab: IDictPrefab = {};\r\n    private static _instance: PoolManager;\r\n\r\n\r\n    public getNode(prefab: Prefab, parent: Node){\r\n        let name = prefab.data.name;\r\n        // console.log('get node   ' + name);\r\n        let node: Node = null;\r\n        this._dictPrefab[name] = prefab;\r\n        const pool = this._dictPool[name];\r\n        if (pool) {\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(prefab);\r\n            }\r\n        } else {\r\n            this._dictPool[name] = new NodePool();\r\n            node = instantiate(prefab);\r\n        }\r\n\r\n        node.parent = parent;\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    public putNode(node: Node){\r\n        let name = node.name;\r\n        // console.log('put node   ' + name);\r\n        node.parent = null;\r\n        if (!this._dictPool[name]) {\r\n            this._dictPool[name] = new NodePool();\r\n        }\r\n\r\n        this._dictPool[name].put(node);\r\n    }\r\n}\r\n\r\n\r\n"]}